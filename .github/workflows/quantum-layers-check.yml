name: Quantum Layers Check

on:
  push:
    branches: [ main, develop, "copilot/**" ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  layers:
    name: Guard terminology & domain layers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Guard LLC terminology & layers
        shell: bash
        run: |
          set -euo pipefail

          echo "üîç Scanning for forbidden terminology‚Ä¶"
          # Enforce approved terminology: 'Federation Entanglement' and 'Station Envelope'
          if grep -RInE "\bFine[[:space:]]+Element\b|\bStation[[:space:]]+Envelop\b" \
              --include='*.md' --include='*.yaml' --include='*.yml' --include='*.json' \
              --include='*.py' --include='*.qasm' --include='*.xml' --include='*.xsd' \
              --include='*.proto' --include='*.r' --include='*.jl' . ; then
            echo "::error::Forbidden terminology found (use 'Federation Entanglement' and 'Station Envelope')."
            exit 1
          fi
          # Soft check for deprecated 'Federation Element'
          if grep -RInE "\bFederation[[:space:]]+Element\b" \
              --include='*.md' --include='*.yaml' --include='*.yml' --include='*.json' \
              --include='*.py' --include='*.qasm' --include='*.xml' --include='*.xsd' \
              --include='*.proto' --include='*.r' --include='*.jl' . ; then
            echo "::warning::Found deprecated phrase 'Federation Element'. Please migrate to 'Federation Entanglement'."
          fi
          echo "‚úÖ Terminology OK"

          echo "üîç Checking quantum-classical bridge layers across domains‚Ä¶"
          MISSING=0
          if [ -d "2-DOMAINS-LEVELS" ]; then
            for D in 2-DOMAINS-LEVELS/*; do
              [ -d "$D/TFA" ] || continue
              for pair in BITS/CB QUBITS/QB ELEMENTS/UE ELEMENTS/FE WAVES/FWD STATES/QS; do
                if [ ! -e "$D/TFA/$pair" ]; then
                  echo "::error file=$D::Missing $pair"
                  MISSING=1
                fi
              done
            done
          fi
          [ $MISSING -eq 0 ] || exit 1
          echo "‚úÖ Domain layers OK"

  impl_buckets:
    name: Verify code implementation buckets
    runs-on: ubuntu-latest
    needs: layers
    steps:
      - uses: actions/checkout@v4

      - name: Check Python implementation buckets
        shell: bash
        run: |
          set -euo pipefail

          echo "üîç Verifying Python buckets exist‚Ä¶"
          missing=0
          buckets=(
            "5-ARTIFACTS-IMPLEMENTATION/CODE/python/classical-bits"
            "5-ARTIFACTS-IMPLEMENTATION/CODE/python/quantum-qubits"
            "5-ARTIFACTS-IMPLEMENTATION/CODE/python/unit-elements"
            "5-ARTIFACTS-IMPLEMENTATION/CODE/python/federation-elements"
            "5-ARTIFACTS-IMPLEMENTATION/CODE/python/wave-dynamics"
          )
          for b in "${buckets[@]}"; do
            if [ ! -d "$b" ]; then
              echo "::error::Missing implementation bucket: $b"
              missing=1
            fi
          done
          [ $missing -eq 0 ] || exit 1
          echo "‚úÖ Implementation buckets OK"

  qs_schema_validation:
    name: Validate QS manifest schemas
    runs-on: ubuntu-latest
    needs: layers
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema pyyaml

      - name: Validate QS manifests against schema
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üî¨ Validating Quantum State (QS) manifests against schema..."
          
          # Check if AQUA schema files exist
          qs_schema="services/aqua-webhook/schemas/quantum_state.json"
          if [ ! -f "$qs_schema" ]; then
            echo "::warning::QS schema not found: $qs_schema"
            echo "‚úÖ QS schema validation skipped (schema not available)"
            exit 0
          fi
          
          validation_errors=0
          total_files=0
          
          # Find all QS manifest files
          while IFS= read -r -d '' file; do
            # Skip if not in QS directory
            if [[ ! "$file" =~ /TFA/STATES/QS/ ]]; then
              continue
            fi
            
            total_files=$((total_files + 1))
            echo "üìÑ Validating: $file"
            
            # Validate with Python script
            python3 - << 'PYTHON_SCRIPT' 
          import json
          import yaml
          import jsonschema
          import sys
          import os

          qs_schema = '$qs_schema'
          file_path = '$file'

          try:
              with open(qs_schema, 'r') as f:
                  schema = json.load(f)
          except Exception as e:
              print(f"Error loading schema: {e}")
              sys.exit(1)

          try:
              with open(file_path, 'r') as f:
                  if file_path.endswith(('.yaml', '.yml')):
                      manifest = yaml.safe_load(f)
                  else:
                      manifest = json.load(f)
          except Exception as e:
              print(f"Error loading manifest: {e}")
              sys.exit(1)

          try:
              jsonschema.validate(manifest, schema)
              print("‚úÖ Valid QS manifest")
          except jsonschema.ValidationError as e:
              print(f"‚ùå Validation error: {e.message}")
              if e.absolute_path:
                  print(f"   Path: {' -> '.join(str(p) for p in e.absolute_path)}")
              sys.exit(1)
          except Exception as e:
              print(f"‚ùå Unexpected validation error: {e}")
              sys.exit(1)
          PYTHON_SCRIPT
            
            if [ $? -eq 0 ]; then
              echo "   ‚úÖ Valid"
            else
              echo "   ‚ùå Invalid"
              validation_errors=$((validation_errors + 1))
            fi
            
          done < <(find 2-DOMAINS-LEVELS -name "*.json" -o -name "*.yaml" -o -name "*.yml" -print0 2>/dev/null || true)
          
          echo ""
          echo "üìä QS Schema Validation Summary:"
          echo "   Total QS files checked: $total_files"
          echo "   Validation errors: $validation_errors"
          
          if [ $validation_errors -gt 0 ]; then
            echo "::error::$validation_errors QS manifest(s) failed schema validation"
            exit 1
          elif [ $total_files -eq 0 ]; then
            echo "::warning::No QS manifests found for validation"
            echo "‚úÖ QS schema validation passed (no files to validate)"
          else
            echo "‚úÖ All QS manifests pass schema validation"
          fi

  aqua_integration_test:
    name: Test AQUA service integration
    runs-on: ubuntu-latest
    needs: [layers, qs_schema_validation]
    if: success() || failure()  # Run even if QS validation fails
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install AQUA dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/aqua-webhook/requirements.txt

      - name: Test AQUA manifest validation
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üß™ Testing AQUA manifest validation..."
          
          # Test with sample FE manifest - simplified for YAML compatibility
          echo "üìã Testing AQUA services availability..."
          if [ -d "services/aqua-webhook" ] && [ -f "services/aqua-webhook/schemas/manifest_schema.py" ]; then
            echo "‚úÖ AQUA services found"
            # TODO: Add proper AQUA validation tests in separate script
            echo "‚úÖ AQUA validation tests - placeholder (needs separate test script)"
          else
            echo "::warning::AQUA webhook services not found, skipping validation tests"
            echo "‚úÖ AQUA validation tests skipped (services not available)"
          fi
